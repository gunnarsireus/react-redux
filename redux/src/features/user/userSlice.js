import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchIsIdentified, fetchToggleIsIdentified } from './userAPI';

const initialState = {
  isIdentified: false,
  status:'idle'
};

export const setIsIdentifiedAsync = createAsyncThunk(
  'user/fetchIsIdentified',
  async (value) => {
    const response = await fetchIsIdentified(value);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const toggleIsIdentifiedAsync = createAsyncThunk(
  'user/fetchToggleIsIdentified',
  async (value) => {
    const response = await fetchToggleIsIdentified(value);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setIsIdentified: (state, action) => {
      state.isIdentified = action.payload;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    toggleIsIdentified: (state) => {
      state.isIdentified = !state.isIdentified;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(setIsIdentifiedAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(setIsIdentifiedAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.isIdentified = action.payload;
      })
      .addCase(toggleIsIdentifiedAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(toggleIsIdentifiedAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.isIdentified = !state.isIdentified;
      });
  },
});

export const { setIsIdentified, toggleIsIdentified } = userSlice.actions;

export const selectUserIsIdentified = (state) => state.user.isIdentified;
export const selectUserStatus = (state) => state.user.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const clearIsIdentifiedIfTrue = () => (dispatch, getState) => {
  const currentValue = selectUserIsIdentified(getState());
  if (currentValue === true) {
    dispatch(toggleIsIdentified());
  }
};

export default userSlice.reducer;
